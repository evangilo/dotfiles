(require 'package)
(setq package-enable-at-startup nil)

(add-to-list 'package-archives '("elpa"      . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa"     . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives '("org"       . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("elpy"      . "https://jorgenschaefer.github.io/packages/"))

(package-initialize)
(eval-when-compile (require 'use-package))

(elpy-enable)

(setq backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist '(("." . "~/.emacs-saves"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups
(setq auto-save-file-name-transforms
      `((".*" "~/.emacs-saves" t)))

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(defvar use-package-verbose t)

(use-package which-key
  :ensure t
  :config (which-key-mode t))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(line-number-mode t)
 '(menu-bar-mode nil)
 '(package-selected-packages
   (quote
    (diff-hl groovy-mode jenkins yaml-mode dockerfile-mode jsx-mode paredit rainbow-delimiters rainbow-mode lua-mode flymake-css flymake-elixir flymake-python-pyflakes git-gutter+ elixir-mode whitespace-cleanup-mode neotree tree-mode js2-refactor js2-mode vue-mode dracula-theme helm-projectile projectile which-key use-package)))
 '(tab-width 2)
 '(tool-bar-mode nil))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(projectile-mode t)
(require 'helm-projectile)
(helm-projectile-on)

(load-theme 'dracula t)

; (use-package flymake-jshint)
(use-package js2-mode)
(use-package js2-refactor)
(use-package diff-hl
  :ensure t
  :config (global-diff-hl-mode))

(defun evo/js-base-mode ()
  (js2-refactor-mode)
  ; (flymake-jshint-load)
  )

(defun evo/js-jsx-mode ()
  (interactive)
  (evo/js-base-mode)
  (js2-jsx-mode))

(defun evo/js-mode ()
  (interactive)
  (evo/js-base-mode)
  (js2-mode)
  (setq js2-basic-offset 2)
  )

(defun evo/vue-mode ()
  (interactive)
  (vue-mode)
  (vue-html-mode)
  (setq-default indent-tabs-mode nil)
  (setq tab-stop-list (number-sequence 2 120 2))
  )

(defun evo/elixir-mode ()
  (interactive)
  (elixir-mode)
  )

(defun evo/lua-mode ()
  (interactive)
  (lua-mode)
  )

(add-to-list 'auto-mode-alist '("\\.js\\'" . evo/js-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . evo/js-jsx-mode))
(add-to-list 'auto-mode-alist '("\\.vue\\'" . evo/vue-mode))
(add-to-list 'auto-mode-alist '("\\.ex\\'" . evo/elixir-mode))
(add-to-list 'auto-mode-alist '("\\.lua\\'" . evo/lua-mode))
(add-to-list 'auto-mode-alist '("\\.jinja\\'" . html-mode))

(require 'neotree)
(global-set-key [f8] 'neotree-toggle)
(setq-default neo-show-hidden-files t)

(defun kill-other-buffers ()
      "Kill all other buffers."
      (interactive)
      (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

(global-set-key (kbd "C-x a k") 'kill-other-buffers)

(require 'whitespace-cleanup-mode)
(add-hook 'before-save-hook 'whitespace-cleanup)

(setq elpy-rpc-backend "jedi")

(defun duplicate-line ()
  (interactive)
  (let ((saved-position (point)))
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank)
    (goto-char saved-position))
  )

(defun copy-line ()
  (interactive)
  (let ((saved-position (point)))
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (goto-char saved-position)))

(defun reload-buffer ()
  (interactive)
  (revert-buffer t t t)
  (message "buffer is reverted"))

(global-set-key (kbd "C-c r") 'reload-buffer)
(global-set-key (kbd "C-c y") 'copy-line)
(global-set-key (kbd "C-c d") 'duplicate-line)
(global-set-key (kbd "C-c g") 'goto-line)
